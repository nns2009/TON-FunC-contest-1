{-

TASK 2 - PROXY.

The aim of proxy contract is to forward all messages to it's owner.

In particular for each message A (except messages from owner itself) such contract
should send the message B to owner with body which contains address of A's sender followed by A's message body in reference (child cell).

The Toncoin value attached to the message should be equal A's value minus fees related to processing (computational and message forwarding fees).
The owner address is stored in contract storage (it is guaranteed that storage contains owner address only).

You may find useful https://ton.org/docs/#/smart-contracts/messages

For messages from owner tests will check absence of outgoing messages.

-}


int slice_data_equal? (slice a, slice b) asm "SDEQ";


;; testable
() recv_internal (int balance, int msg_value, cell in_msg_full, slice in_msg_body) {
	slice ds = get_data().begin_parse();
	slice owner_address = ds~load_msg_addr();

	slice cs = in_msg_full.begin_parse();
	cs~skip_bits(4); ;; cs~load_uint(4); ;; flags
	slice sender_address = cs~load_msg_addr();
	
	throw_if(0, slice_data_equal?(owner_address, sender_address));
	;; if (slice_data_equal?(owner_address, sender_address)) {
	;; 	return ();
	;; }
	
	;; !!! check if cs has msg_body as a cell - that might save cell_creation in some cases

	var msg = begin_cell()
				.store_uint(0x18, 6)
				.store_slice(owner_address)
				.store_grams(0) ;; !!! check grams
				.store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
				.store_slice(sender_address)
				.store_ref(begin_cell().store_slice(in_msg_body).end_cell())
			.end_cell();
	 send_raw_message(msg, 64); ;; !!! check mode
}