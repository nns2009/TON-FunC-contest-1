{-

TASK 1 - COUNTER.

Let's start.

This simple counter smart contract stores a `total` - 64-bit unsigned integer in its data (it is guaranteed that storage data contains `total`).

When receiving an internal incoming message, contract takes a 32-bit unsigned integer from message body, adds it to the `total` and saves the result in contract data.

Get-method `get_total` should returns actual `total` value stored in contract data.

If the body of the incoming message is less than 32 bits then it should throw ANY error.

-}

;; testable
() recv_internal(slice in_msg) impure {
	;; throw_if(10, in_msg.slice_bits() < 32);
	int n = in_msg.preload_uint(32);

	int total = get_data().begin_parse().preload_uint(64);

	set_data(begin_cell().store_uint(n + total, 64).end_cell());
}

;; testable
int get_total() method_id {
	slice ds = get_data().begin_parse();
	int total = ds.preload_uint(64);
	return total;
}