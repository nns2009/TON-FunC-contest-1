;; ---------------- fift-asm operations

;; Slice "literals"
;; https://t.me/tondev/62935
slice my_slice() asm "x{deadbeef} PUSHSLICE";

;; From default 2.fc
int slice_data_equal? (slice a, slice b) asm "SDEQ";

;; https://t.me/tondev/62982
;; !!! doesn't work
int cell_hash?(cell c) inline method_id asm "HASHCU";
int cell_equal? (cell a, cell b) inline method_id asm "HASHCU SWAP HASHCU EQUAL";
int slice_equal? (slice a, slice b) asm "HASHSU SWAP HASHSU EQUAL";

;; Based on tvm.pdf - seems correct
builder store_builder(builder a, builder b) inline asm "STBR";
builder store_zeros(builder b, int count) inline asm "STZEROES";
builder store_ones(builder b, int count) inline asm "STONES";
int bits_remaining(builder b) inline asm "BREMBITS";

forall X -> int is_tuple?(X object) inline asm "ISTUPLE";

;; x{D73B} @Defop XLOADQ

int actions_empty?(cell a) inline asm "<{ CTOS DROP 0 PUSHINT }>CONT <{ DROP -1 PUSHINT }>CONT 1 1 TRYARGS";
;; int actions_empty3?(cell c) inline asm "TRY:<{ CTOS DROP FALSE }>CATCH<{ DROP TRUE }>";
;; int actions_empty?2(cell c) inline asm "XLOADQ SWAP DROP";



() assert_actions_empty(cell c, int error_code) impure inline method_id
{ throw_unless(error_code, actions_empty?(c)); }


;; ---------------- Slice, cell, builder conversions
slice bto_slice(builder b) inline method_id {
    return b.end_cell().begin_parse();
}

int cell_empty?(cell c) inline method_id {
    return c.begin_parse().slice_empty?();
}

cell to_cell(slice s) inline method_id {
    return begin_cell().store_slice(s).end_cell();
}


;; ---------------- Slice creation
slice slice_zeros(int count) inline method_id {
    return begin_cell().store_zeros(count).bto_slice();
}
slice slice_ones(int count) inline method_id {
    return begin_cell().store_ones(count).bto_slice();
}


;; ---------------- Cell creation
cell cell_from_2_slice(slice a, slice b) inline method_id {
	return begin_cell()
		.store_slice(a)
		.store_slice(b)
		.end_cell();
}


;; ---------------- Integer functions
slice ito_slice(int i, int len) inline method_id {
    return begin_cell().store_int(i, len).end_cell().begin_parse();
}
slice uto_slice(int u, int len) inline method_id {
    return begin_cell().store_uint(u, len).end_cell().begin_parse();
}


;; ---------------- Slice assert functions
slice assert_equal(slice s, slice expected_value, int error_code) impure inline method_id {
    throw_unless(error_code, slice_equal?(s, expected_value));
    return s;
}




;; ---------------- Slice expect functions
slice expect_uint(slice s, int expected_value, int len, int error_code) impure inline method_id {
    int value = s~load_uint(len);
    throw_unless(error_code, value == expected_value);
    return s;
}
(slice, ()) ~expect_uint(slice s, int expected_value, int len, int error_code) impure inline method_id {
    return (expect_uint(s, expected_value, len, error_code), ());
}


slice expect_grams(slice s, int expected_value, int error_code) impure inline method_id {
    int value = s~load_grams();
    throw_unless(error_code, value == expected_value);
    return s;
}
(slice, ()) ~expect_grams(slice s, int expected_value, int error_code) impure inline method_id {
    return (expect_grams(s, expected_value, error_code), ());
}


slice expect_msg_addr(slice s, slice expected_addr, int error_code) impure inline method_id {
    slice addr = s~load_msg_addr();
    throw_unless(error_code, slice_equal?(addr, expected_addr));
    return s;
}
(slice, ()) ~expect_msg_addr(slice s, slice expected_addr, int error_code) impure inline method_id {
    return (expect_msg_addr(s, expected_addr, error_code), ());
}


(slice, cell) expect_single_ref(slice s, int error_code) impure inline method_id {
    throw_unless(error_code, s.slice_refs() == 1);
    cell c = s~load_ref();
    return (s, c);
}


slice expect_slice(slice s, slice expected_prefix, int error_code) impure inline method_id {
    int prefix_len = expected_prefix.slice_bits();
    throw_unless(error_code, s.slice_bits() >= prefix_len);
    slice prefix = s~load_bits(prefix_len);
    throw_unless(error_code + 1, slice_equal?(prefix, expected_prefix));
    return s;
}
(slice, ()) ~expect_slice(slice s, slice expected_prefix, int error_code) impure inline method_id {
    return (expect_slice(s, expected_prefix, error_code), ());
}


slice expect_zeros(slice s, int count, int error_code) impure inline method_id {
    return expect_slice(s, slice_zeros(count), error_code);
}
(slice, ()) ~expect_zeros(slice s, int count, int error_code) impure inline method_id {
    return (expect_zeros(s, count, error_code), ());
}


(slice, ()) expect_empty(slice s, int error_code) impure inline method_id {
    throw_unless(error_code, s.slice_empty?());
    return (s, ());
}




;; ---------------- Test functions
(int, cell) extract_single_message(cell actions) impure inline method_id {
    ;; ---------------- Parse actions list
    ;; prev:^(OutList n)
    ;; #0ec3c86d
    ;; mode:(## 8)
    ;; out_msg:^(MessageRelaxed Any)
    ;; = OutList (n + 1);
    slice cs = actions.begin_parse();
    throw_unless(1010, cs.slice_refs() == 2);
    
    cell prev_actions = cs~load_ref();
    throw_unless(1011, prev_actions.cell_empty?());
    
    int action_type = cs~load_uint(32);
    throw_unless(1013, action_type == 0x0ec3c86d);
    
    int msg_mode = cs~load_uint(8);
    throw_unless(1015, msg_mode == 64); ;; !!! check msg_mode
    
    cell msg = cs~load_ref();
    throw_unless(1017, cs.slice_empty?());
    
    return (msg_mode, msg);
}
cell extract_single_message_of_mode(cell actions, int expected_mode) impure inline method_id {
    (int msg_mode, cell msg) = extract_single_message(actions);
    throw_unless(1017, msg_mode == expected_mode);
    
    return msg;
}


slice expect_typical_inline_header_to(slice cs, slice expected_receiver) impure inline method_id {
	int error_code = 2000;
    cs~expect_uint(6, 4, error_code); ;; flags
    cs~expect_msg_addr(slice_zeros(2), error_code + 2);
    cs~expect_msg_addr(expected_receiver, error_code + 4);
    cs~expect_grams(0, error_code + 6); ;; !!! is this even correct?
    cs~expect_zeros(1 + 4 + 4 + 64 + 32 + 1 + 1, error_code + 8);
    return cs;
}
(slice, ()) ~expect_typical_inline_header_to(slice cs, slice expected_sender) impure inline method_id {
	return (expect_typical_inline_header_to(cs, expected_sender), ());
}


;; ---------------- Generators
cell create_typical_inline_message(slice sender, slice receiver, slice in_msg_body) inline method_id {
    cell in_msg_full = begin_cell()
        .store_uint(6, 4)
        .store_slice(sender)
        .store_slice(receiver)
        .store_grams(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_slice(in_msg_body)
        .end_cell();
	return in_msg_full;
}

cell create_typical_auto_message(slice sender, slice receiver, slice in_msg_body) inline method_id {
    builder in_msg_full = begin_cell()
        .store_uint(6, 4)
        .store_slice(sender)
        .store_slice(receiver)
        .store_grams(0)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1);

    if (in_msg_full.bits_remaining() >= 1 + in_msg_body.slice_bits()) {
        in_msg_full = in_msg_full
            .store_uint(0, 1) ;; in place
            .store_slice(in_msg_body);
    } else {
        in_msg_full = in_msg_full
            .store_uint(1, 1) ;; in reference
            .store_ref(in_msg_body.to_cell());
    }

	return in_msg_full.end_cell();
}

[int, tuple, cell, tuple, int] create_typical_recv_internal_test_data(
	cell data,
	slice sender, slice receiver,
	slice in_msg_body
) inline method_id {
    int balance = 1000 * 1000;
    int msg_value = 100 * 1000;
    
    cell in_msg_full = create_typical_auto_message(sender, receiver, in_msg_body);
    tuple stack = unsafe_tuple([balance, msg_value, in_msg_full, in_msg_body]);
    
    return [0, stack, data, get_c7(), null()];
}

_ error_test_check(int exit_code, cell actions) impure inline method_id {
	throw_unless(200, exit_code > 1);
	throw_unless(99, actions_empty?(actions));
}
